Problem 1 (5 / 7 points)  
A well -known media -services provider has requested the help of our team to improve the performance of 
their service.  They want to reorganize the way they handle the media content. They have defined three 
basic types of media: films, series and episodes.   
• Every media content has two basic characteristics: name  and category . 
• Each film stores some additional information: duration of the film (in minutes) and the budget of 
its production.  This class is already implemented.  
• Each serie s stores the total number of episodes (numberOfEpisodes ) and an ArrayList  
containing all the episodes  (episodes ). The maximum number of episodes per series is 10.  
• Each episode , which is an independent media file by itself, has a duration in minutes  (duration), 
and an ID (a unique identifier assigned in incremental order).  
The following piece of code shows some examples of how the objects of this classes are created (our 
solution must be compatible with this piece of code)  
  Episode episode1  = new Episode( "Winter is coming" ,"Action" ,55); 
  Episode episode2  = new Episode( "The king's road" ,"Action" ,57); 
  ArrayList <Episode> episodes  = new ArrayList<Episode>();  
   
  episodes .add(episode1 ); 
  episodes .add(episode2 ); 
   
  try { 
   Series series1 = new Series("Game of Thrones" ,"Action" , episodes ); 
  } catch (FullSeriesException e) { 
   System. err.println( "Maximum number of episodes is 10" ); 
   System. exit(-1); 
  } 
Section 1.1 (0.75 points ) 
Implement the class Media . This class represents each individual media content offered by the company. 
The characteristics of this class should be visible only for its subclasses.  This class also declares one 
method: computeTotalDuration()  which return s the total duration of a med ia content. Nevertheless, the 
specific behavior of this method depends on the kind of media we refer to . 
Section 1.2 (1 points)  
Implement the class Episode . This class represent s media files which are episodes of a certain serie s. The 
characteristics  of this class should be visible only from this class. However,  a “SET method ” needs to  be  
 

implemented for the duration  attribute.  In this case, the  method computeTotalDuration() return directly the 
duration associated to that episode.  In the example above , the episode1  is named “Winter is coming”, it 
belongs to “Action” category and has a duration of 55 minutes.  
Section 1.3 (0.5 points)  
Implement the class FullSeriesException . This class represent s the exception which should be 
thrown when trying to create a series with more than 10 episodes and when trying to add a new episode to 
a series which already has 10 episodes.  
Section 1.4 (2.75 points)  
Implement the class Series . This class represent media files which are series. The total number of 
episodes  and the ArrayLis t containing the episodes should only be visible from this class . In this case, 
the method computeTotalDuration()  return s the sum of the duration of the episode s which are part of the 
serie s. You are also requested to program the method that adds a new episode to a serie s addNewEpisode().  
In the example above, the series1  is named “Game of Thrones”, it belongs to “Action” category and the 
episodes which are part of the series are included in the ArrayList  named episodes . 
NOTE  1: Take into account the maximum number of episodes per serie s and make use of the exception 
you have programmed in the previous section . 
NOTE  2: Do not care about importing the class  ArrayList<E> . 
NOTE 3 : Some of the methods of  ArrayList<E> , which may be useful for this section are:  
• boolean add(E e)  
• void add(int index, E element)  
• E get(int index)  • int indexOf(Object o)  
• boolean isEmpty()  
• E set(int index, E element)  
• int size()  
Problem 2 (2 / 7 points)  
You are employed in the new airline "UC3M Airlines", member of the UniversityWorld Alliance. In this  
airline, frequent clients can become members its frequent -flier programme UC3M+ , where  you can get 
points each time you travel to get discounts, VIP Lounge accesses, priority boarding, etc. A workmate has 
implemented the class PointsCalculator . This class has method to compute the points each client 
gets for each flight depending on the miles and the flight class. The code of this class is as follows:   
public class PointsCalculator {  
   public static int getPointsFlig ht(String 
flightClass , int miles){ 
 int points = 0; 
 if (miles >= 2000 && miles < 6000){ 
  points = 200;  
 } else if(miles >= 6000 ){   
  points = 300; 
 } else {  
  points = 100; 
 }  
   if(flightClass .equals( "Business" )){  
 points = points * 2; 
   } 
   else if(flightClass .equals( "Premium 
Economy" )){ 
 points = (int)(points * 1.25);  
   } 
   return points; 
   } 
} 
You are asked to d evelop some initial  test methods with limited coverage using the minimum lines  of code 
as possible for each test.  If any test is impossible to carry out as specified, justify why it is not possible.  
a) The first test should achieve a branch coverage of exactly 50% in class PointsCalculator (0. 55p) 
b) The second test should achieve a met hod coverage of exactly 50% in class PointsCalculator (0.5 5p) 
c) The third test should achieve a line coverage of 100% in method getPointsFlights() . (0.55 p). Can 
this test also be used for a black -box test? Justify your answer in 1 -2 lines.  (0.35p) 
NOTE : Do not care about the class declaration and imports. Just implement the three methods.   
 
