Problem 1 (2 .25 points ) 
A company that commercializes an e -mail service needs to implement an authentication system to access 
its service. The e -mail service offers two kinds of accounts: a general -purpose  account that can be used for 
personal use , modeled in the class Account , and a professional account  modeled in the class 
ProfessionalAccount . 
Section 1.1 ( 0.75 points ) 
Implement the class that models the general -purpose  account (Account ), considering  the following 
requirements:  
• The class must  store  the username  (username ) and the password  (password ) for each account . 
Both attributes can contain alphanumeric characters . In addition, the class will contain an attribute 
to determine whether  the account is blocked or not (isBlocked ). These attributes  cannot  be 
directly acces sed from any other class.  
• The password must have a minimum length of 8 characters. This minimum length of 8 characters 
must be modeled with a constant (PASSWORD_MIN_LENGTH ). If there is an attempt  to set a 
password with a smaller length, a PasswordException  will be  thrown with the message "The 
length of the password must be at least 8 characters".  
• The class  PasswordException  is already implemented so you do not need to worry about 
implementing it . 
• The constructor receives as parameters the username and the password. The password must fulfill  
the requirement of minimum length previously mentioned.  
• The access methods ( get and set) must be implemented considering  that the  values of all the  
attributes c an be retrieved  (get), but only the attribute s that indicates if the account is blocked or 
not and the password (must always fulfill  the minimum length restriction) can be modified  (set). 
Section 1.2 (0 .5 points ) 
Implement t he class that models the professional account (ProfessionalAccount ), considering that 
this is a specific type of account ( Account ) with the following particularities:   
• In addition to the attributes of Account , this class stores the name of the  company  (company ) to 
which the user belongs . The company name will be initialized in the constructor and cannot be 
changed after the creation of the professional  account, although its value can be retrieved from 
other classes.   
 
 

• The password has the same minimum length restriction as in the case of the  Account  class, 
although it includes an additional security validation whereby the value of the password cannot be 
equal to the value of the username.  
Section 1.3 (1 point)  
Implement the class AuthenticatorManager , which  keeps a list of e-mail accounts  (regardless of 
whether the account s are for personal or professional  use),  and handles the user authentication  (checking 
that the username and password entered match those  already  stored  in the list of e -mail accounts ). The class  
AuthenticatorManager  implement s the following interface:  
public interface Authenticator  { 
    static final int USER_AUTHENTICATED  = 0; 
    static final int PASSWORD_INCORRECT  = 1; 
    static final int ACCOUNT_BLOCKED  = 2; 
    static final int ACCOUNT_NOT_FOUND  = 3;  
 
    int authenticateUser( String username, String password ); 
} 
The class  AuthenticatorManager  must fulfill the following requirements : 
• The constructor receives an array with all the accounts registered in the service (Account[] 
accounts ).  
• The method  authenticateUser(...)  is in charge of the authentication  using the username 
and password received as  parameter s and the array of accounts received in the constructor. This 
method  returns an integer indicating one of the 4 possibilities of the authentication process , as 
established in the interface  Authenticator . The security is a very important aspect for the 
service provider , so when a user enters a wrong password once, the account must be blocked 
autom atically.  
• For the implementation of the method authenticateUser(...) , you must be considered that 
there will not be two accounts with the same username . 
 
Problem 2 (0 .75 points)  
Given the class Number: 
public class Number { 
 private int number; 
 public Number (int number){ 
  this.number = number; 
 } 
 public int result(){  
  if (number > 0) { 
   return 1; 
  } else if (number < 0) {  
   return -1; 
  } else { 
   return 0; 
  } 
 } 
}  
 
 

You are asked to implement the following test s. If a test  cannot be implemented,  then you must justify the 
why. Note: You can only create a maximum of one object per section and you cannot make several calls 
to the same method in the same section . 
Section 2.1 (0 .45 points)  
Program a test which achieves a branch coverage  between 1% ( included ) and 33% ( not included ). 
Section 2.2 (0 .15 points)  
Program a test which achieves a branch coverage  between 50% ( not included ) and 67% (inclu ded).  
Section 2.3 (0 .15 points)  
Program a test which achieves a method coverage  between 1% and 50% ( both included ).  
 
Problem 3 (2 points ) 
The company “Scheduled Packets”  is a delivery company dedicated to the distribution  of packets between 
individuals. In order to organize and manage the reception and the  shipment of the packets, the company 
has asked its team of programmers to create a software that f acilitates and automates the se tasks . 
The task of the programming team is to implement  a queue of packages to manage their reception and 
subsequent shipment. The team has some classes already programmed (see below ) and assigns you the task 
of creat ing a new class , PacketsQueue , which  extends LinkedQueue<Packet> . This new class will 
be the company's implementation of its own packet queue.  
 
public class Node<E>{  
   private E info; 
   private Node<E> next; 
   public Node(){…}    
   public Node(E info){…} 
   public Node(E info, Node<E> next){…} 
   public E getInfo(){ …} 
   public void setInfo(E info){…}     
   public Node<E> getNext(){ …}  
   public void setNext(Node<E> next){…} 
} public interface  Queue<E>{  
   boolean isEmpty();  
   int size();  
   E front();  
   void enqueue (E info); 
   E dequeue();   
} 
  
  
  
public class Packet{  
   private int numberId ; 
   private String dest; 
   private boolean urgent; 
   public Packet(int numberId , String dest, boolean urgent){ 
      this.numberId  = numberId ; 
      this.dest = dest; 
      this.urgent = urgent;      
   }    
   public int getNumberId(){  return numberId ; } 
   public void setNumberId( int numberId ){ 
      this.numberId  = numberId ; 
   } 
   public String getDest(){  return dest; } 
   } 
   public void setDest(String dest){ 
      this.dest = dest; 
   } 
   public boolean isUrgent(){  return urgent; } 
   public void setUrgent( boolean urgent){ 
      this.urgent = urgent; 
   }    
} public class LinkedQueue<E> implements  
Queue<E>{  
   protected  Node<E> top; 
   protected  Node<E> tail; 
   protected  int size; 
     
   public LinkedQueue(){ …} 
     
   public boolean isEmpty(){ …}  
   public int size(){ …   
   public E front(){ …}   
   public void enqueue (E info){…} 
   public E dequeue(){…}  
} 
   
 
 

public class PacketsQueue extends LinkedQueue<Packet>{  
  public PacketsQueue(){  
        super(); 
  } 
  
  public Packet sendPacket(){ //Section 3.1 }  
  public Packet sendUrgent(){ //Section 3.2 }  
} 
Section 3.1 (0 .4 points)  
Program the method  public Packet sendPacket() . This method returns the first packet that is 
waiting to be shipped and removes it from the queue.  If there is no packet waiting to be s hipped  (the queue 
is empty) , then  the returned value must  be null . 
 
Section 3.2 (1 .6 points)  
Program the method  public Packet sendUrgent() . This method returns the first urgent  packet 
that is waiting to be shipped and removes it from the queue . If there is no urgent packet waiting to be 
shipped , the returned value must  be null . 
 
Problem 4 (2 points)  
In binary trees, the balance factor  of each node is defined as the difference  between the height of its right 
subtree and the height of its left subtree, so that:  
• A balance factor equals to 0 means that the two subtrees have the same height  
• A positive balance factor indicates that the right subtree has a higher height than the left  subtree.  
• A negative balance factor indicates that the left subtree has a higher height than the right subtree.  
In order to consider the balance factor , the attribute private int balanceFactor  has been added 
to the LBNode<E>  class, as well as the correspon ding public getter and setter ( getBalanceFactor  
and setBalanceFactor  respectively), which  are already implemented. Initially all the nodes will start 
from a balance factor with value 0, being necessary to call a method to update all the balance factors right 
after the creation of the tree has finished . 
Add a method public void updateBalanceFactor()   to the LBTree<E>  class that updates in 
a recursive way  the balance factor of every node of the tree.  
Next you can see the available methods of the  interface  BTree<E>  and th e implementation for the  classes 
LBNode<E>  and LBTree<E> : 
   
 
 

public interface  BTree<E> {  
  static final int LEFT = 0;  
  static final int RIGHT = 1;  
  boolean isEmpty();  
  E getInfo();  
  BTree<E> getLeft();  
  BTree<E> getRight();  
  void insert(BTree<E> tree, int side); 
  BTree<E> extract( int side); 
  String toStringPreOrder();  
  String toStringInOrder();  
  String toStringPostOrder();  
  String toString();  
 
  int size();  
  int height();  
  boolean equals(BTree<E> tree); 
  boolean find(BTree<E> tree); 
} public class  LBNode<E>{  
  private E info; 
  private BTree<E> left; 
  private BTree<E> right; 
  private int balanceFactor ; 
  
  LBNode(E info, BTree<E> left, BTree<E> right) { 
    this.left = left; 
    this.right = right; 
    this.info = info; 
  } 
 
  E getInfo() {  return info; } 
  void setInfo(E info) { this.info = info; } 
 
  BTree<E> getLeft() {  return left; } 
  void setLeft(BTree<E> left) { this.left = left; } 
 
  BTree<E> getRight() {  return right; } 
  void setRight(BTree<E> right) { this.right = right; } 
 
  int getBalanceFactor() {  return balanceFactor ; } 
  void setBalanceFactor(int balanceFactor ){  
    this.balanceFactor  = balanceFactor ; 
  } 
}  
public class LBTree<E> implements  BTree<E>{  
    private LBNode<E> root; 
    public LBTree() {  
        root = null; 
    } 
    public LBTree(E info) { 
        root = new LBNode<E>( info, new LBTree<E>(), new LBTree<E>());  
   } 
   ...  
   public void updateBalanceFactor() { //Problem 4  } 
} 
