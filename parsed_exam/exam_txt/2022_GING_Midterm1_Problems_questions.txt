Problem 1 (4 / 7 points) A tyre manufacturer is developing an advanced type of tyres to obtain the best performance. The performance depends on the height (height) and the working temperature (temp) of the tyre. The manufacturer has designed three different types of tyres so far, which are summer, winter and all-season tyres. For summer tyres it is also relevant to know if they can run flat (runFlat) or not, and the wear coefficient (wear). For winter tyres it is important to know the snow grip coefficient (snowGrip). These coefficients can be expressed as double numbers. The manufacturer considers 25 degrees as the normal temperature for testing the tyres. This temperature is used to calculate the optimum working temperature for each type of tyre, which differs from one type of tyre to another, according to the following: - For summer tyres, if they can run flat the optimum temperature will be 2.5 times the normal temperature. Otherwise it will be the normal temperature multiplied by the wear coefficient.  - For winter tyres the optimum temperature will be the normal temperature multiplied by the snow grip coefficient.  - For all-season tyres, if the height is greater than 50 the optimum temperature will be 80.3 degrees.  Otherwise it will be 75.7.   Section 1.1 (0.4 points) Declare the interface AdvancedTyreInterface containing a constant for the normal temperature and the method calculateOptimumTemp().  Section 1.2 (0.8 points) Write the code for the class AdvancedTyre. Declare all the attributes and the getter and setter for the attribute height. Also write the code for a constructor with all the attributes. Before assigning the value of the attribute height you must check the value to be assigned is positive, and launch the exception NegativeNumberException otherwise. Assume this exception is already created for you. The class AdvancedTyre must implement the interface declared in the first section.    

Section 1.3 (1.2 points) Declare the classes SummerTyre, WinterTyre and AllSeasonTyre. Declare the attributes and write the code for the method public double calculateOptimumTemp() for each class. You do not need to declare the getters and setters for these classes. Assume getters and setters are created for you if you need to use them.  Section 1.4 (0.8 points) Write the code for the testing method public void testCalculateOptimumTemp() to test the method public double calculateOptimumTemp() in class AllSeasonTyre. The test must meet these two conditions: On the one hand the test must pass (positive test), and on the other hand it must have 100% line coverage on the method public double calculateOptimumTemp().    Section 1.5 (0.8 points) Write the code for the testing method public void testSetHeight() to test that the NegativeNumberException is thrown in the setter for the attribute height. Use the class SummerTyre for this purpose.        

Problem 2 (3 / 7 points)  A leading logistics company has asked you to develop a program for managing a warehouse. To define Provider management, define two classes:  • Person (Person). It refers to any relevant person for the management of a warehouse. It can be a customer of the warehouse, the employee that manages the order, or the contact person for a provider. To identify a person, we need his/her identification number (id), first name (firstName), last name (lastName) and contact email (email).   public class Person {     private int id;     private String firstName;     private String lastName;     private String email;  public Person(int id, String firstName, String lastName, String email) {         try {             setId(id);             setFirstName(firstName);             setLastName(lastName);             setEmail(email);         } catch (PersonException pe) {             pe.printStackTrace();             System.exit(1);         }  public String toString() {         return id + "|" + firstName + "|" + lastName + "|" + email + "\n";     }  }  Note: All getters and setters of this class are implemented.  You are asked to:   Section 2.1 (1 point)  Class Provider is the company in charge of supplying a product to the warehouse. It contains the company's tax identification number (vat), its name (name), the billing address (taxAddress) and a contact person (contactPerson). This last attribute is of type Person. Implement the class Provider with its constructor, attributes only visible in this class, and a method toString() to print on screen all its attributes.            

Section 2.2 (1 point)  Class Worker that inherits from the class Person which represents the workers in the warehouse. Each worker will have a salary and a position (only visible in this class): All workers receive the same salary, this quarter it is 2.000 euros, although it is not fixed because it can increase each quarter if there are large profits in the business. The worker's position will be modelled by means of constants that can take the following values:  WAREHOUSE = “stockman”; SELLER = “sales”. Implement a constructor and assign the corresponding value to the attributes. You will need to check that the position is correct and if it is not, assign the default value that is WAREHOUSE. Implement also a method toString() to print on screen all its attributes.  Section 2.3 (1 point) Program a class DatabaseWarehouse, which will be the main class of your program, in which you will test your code. To do this, include a method main. In that method you should initialize an ArrayList <Person> in which you will include a Worker and a contactPerson of Provider. Also, you must call the method toString() that you have implemented in the previous sections, on the entries of your ArrayList so that the result that is printed on screen.  NOTE 1: You don't have to worry about importing the class ArrayList.   NOTE 2: The class ArrayList has the following methods, some of which may be useful:  • boolean add(E e)  • void add(int index, E element)  • void clear()  • E get(int index)   • int indexOf(Object o)  • boolean isEmpty()  • boolean remove(Object o)  • int size()                 
