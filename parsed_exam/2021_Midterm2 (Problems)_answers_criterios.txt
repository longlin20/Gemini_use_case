PROBLEM 
Section 1.1 ( 1.5 points)  
public Order search( int orderID) { 
 Order result = null; 
 if(!ordersToProcess .isEmpty()) {  
  for(int i=0; i<ordersToProcess .size(); i++) { 
   Order aux = ordersToProcess .dequeue();  
   if(aux.getOrderID() == orderID) { 
    result = aux; 
   } 
   ordersToProcess .enqueue( aux); 
  } 
 } 
 return result; 
} 
 
Evaluation criteria:  
● 0.2: Create variable and return it at the end  
● 0.2: Loop to iterate over the size of the queue  
● 0.3: Deque element  
● 0.3: If to check if the orderIDs match.  
● 0.2: Assign the order to the result variable in case the orderID matches  
● 0.3: Enqueue element. If there is a break to stop enqueuing after finding the element, max 0.
● Significant errors are subject to additional penalties  
 
Section 1.2 (1 point)  
public Order search( int orderID) { 
     Node<Order> aux = head; 
     while(aux != null) { 
      if(aux.getInfo().getOrderID()== orderID) { 
       return aux.getInfo();  
      } 
      aux = aux.getNext();  
     } 
     return null; 
} 
 
Evaluation criteria  
● 0.2: Initialize aux node  
● 0.3: Loop to traverse the l ist (including update of aux)  
● 0.3: Check if the ID matches  
● 0.2: Return the information correctly  
● Significant errors are subject to additional penalties  
 
Section 1.3 ( 0.5 points)  
public Order search2( int orderID) { 
 return ordersToProcess .search( orderID); 
}  
 
 

Evaluation criteria  
● 0.5: Correct call to method s earch. If return is not used, máx 0.2.  
● Significant errors are subject to additional penalties  
 
PROBLEM 
public class ArrayListStack<E> {  
 private ArrayList<E> arraylist ; 
  
 public ArrayListStack(){  
  arraylist  = new ArrayList<E>();  
 } 
  
 public void push(E info) { 
  arraylist .add(0, info); // or arraylist.add(info)  
 } 
  
 public E pop() {  
  return arraylist .remove(0); // or arraylist.remove(arraylist.size())  
 } 
} 
 
Evaluation criteria  
● 0.2: Constructor  
● 0.4: Method push  
● 0.4: Method pop  
● Significant errors are subject to additional penalties  
 
PROBLEM 
Section 3.1 (0.5 points)  
Symbol  Encoding  Depth  
B 01 
D 110 
E 111 
Evaluation criteria  
● Penalize 0.1 for each incorrect c ell (e.g., 0.4 if 5/6 cells are correct and 0 is less 2 cells are correct)  
● Significant errors are subject to additional penalties  
 
 
 
 
  
 
 

Section 3.2 (2 points)  
public String findEncoding(String symbol) { 
 if(isEmpty()) { // Base case when reaching a leaf without finding the symbol  
  return "-1"; 
 } else if(root.getInfo().equals( symbol)) { // Base case when finding the 
symbol 
  return ""; 
 } else { 
  // Add 0 when moving to the left  
  String left = "0" + root.getLeft().findEncoding( symbol); 
  // Add 1 when moving to the right  
  String right = "1" + root.getRight().findEncoding( symbol); 
    
  // If the left String does not contains -1,  
  // it means the symbol is found in the left part and it is returned  
  if(!left.contains( "-1")) return left; 
  // If the right String does not contains -1,  
  // it means the symbol is found in the left part and it is returned  
  if(!right.contains( "-1")) return right; 
  // If both left and right contain -1, it means the symbol is not found 
and -1 is returned  
  return "-1"; 
 } 
} 
 
Evaluation criteria  
● 0.3: Base case when reaching a leaf without finding the symbol  
● 0.3: Base case when finding the symbol  
● 0.4: Recursive case when moving to the left  
● 0.4: Recursive case when moving to the right  
● 0.6: Correct management to return the result depending on the part of the tree where symbol is found  
● Signific ant errors are subject to additional penalties  
 
Section 3.3 (0.5 points)  
public int findDepth(String symbol) { 
 String coding = findEncoding( symbol); 
 if(coding.equals( "-1")) return -1; 
 return coding.length();  
} 
 
Evaluation criteria  
● 0.2: Call to findEncoding  
● 0.1: Check if coding is -1, and return -1 in that case  
● 0.2: Return the information when coding is not -
● Significant errors are subject to additional penalties